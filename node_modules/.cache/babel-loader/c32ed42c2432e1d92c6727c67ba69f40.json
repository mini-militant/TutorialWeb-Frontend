{"ast":null,"code":"'use strict';\n\nvar WritableStream = require('stream').Writable,\n    inherits = require('util').inherits,\n    Parser = require('./index');\n/**\r\n * Streaming HTML parser with scripting support.\r\n * A [writable stream]{@link https://nodejs.org/api/stream.html#stream_class_stream_writable}.\r\n * @class ParserStream\r\n * @memberof parse5\r\n * @instance\r\n * @extends stream.Writable\r\n * @param {ParserOptions} options - Parsing options.\r\n * @example\r\n * var parse5 = require('parse5');\r\n * var http = require('http');\r\n *\r\n * // Fetch the google.com content and obtain it's <body> node\r\n * http.get('http://google.com', function(res) {\r\n *  var parser = new parse5.ParserStream();\r\n *\r\n *  parser.on('finish', function() {\r\n *      var body = parser.document.childNodes[0].childNodes[1];\r\n *  });\r\n *\r\n *  res.pipe(parser);\r\n * });\r\n */\n\n\nvar ParserStream = module.exports = function (options) {\n  WritableStream.call(this);\n  this.parser = new Parser(options);\n  this.lastChunkWritten = false;\n  this.writeCallback = null;\n  this.pausedByScript = false;\n  /**\r\n   * The resulting document node.\r\n   * @member {ASTNode<document>} document\r\n   * @memberof parse5#ParserStream\r\n   * @instance\r\n   */\n\n  this.document = this.parser.treeAdapter.createDocument();\n  this.pendingHtmlInsertions = [];\n  this._resume = this._resume.bind(this);\n  this._documentWrite = this._documentWrite.bind(this);\n  this._scriptHandler = this._scriptHandler.bind(this);\n\n  this.parser._bootstrap(this.document, null);\n};\n\ninherits(ParserStream, WritableStream); //WritableStream implementation\n\nParserStream.prototype._write = function (chunk, encoding, callback) {\n  this.writeCallback = callback;\n  this.parser.tokenizer.write(chunk.toString('utf8'), this.lastChunkWritten);\n\n  this._runParsingLoop();\n};\n\nParserStream.prototype.end = function (chunk, encoding, callback) {\n  this.lastChunkWritten = true;\n  WritableStream.prototype.end.call(this, chunk, encoding, callback);\n}; //Scriptable parser implementation\n\n\nParserStream.prototype._runParsingLoop = function () {\n  this.parser._runParsingLoop(this.writeCallback, this._scriptHandler);\n};\n\nParserStream.prototype._resume = function () {\n  if (!this.pausedByScript) throw new Error('Parser was already resumed');\n\n  while (this.pendingHtmlInsertions.length) {\n    var html = this.pendingHtmlInsertions.pop();\n    this.parser.tokenizer.insertHtmlAtCurrentPos(html);\n  }\n\n  this.pausedByScript = false; //NOTE: keep parsing if we don't wait for the next input chunk\n\n  if (this.parser.tokenizer.active) this._runParsingLoop();\n};\n\nParserStream.prototype._documentWrite = function (html) {\n  if (!this.parser.stopped) this.pendingHtmlInsertions.push(html);\n};\n\nParserStream.prototype._scriptHandler = function (scriptElement) {\n  if (this.listeners('script').length) {\n    this.pausedByScript = true;\n    /**\r\n     * Raised then parser encounters a `<script>` element.\r\n     * If this event has listeners, parsing will be suspended once it is emitted.\r\n     * So, if `<script>` has the `src` attribute, you can fetch it, execute and then resume parsing just like browsers do.\r\n     * @event script\r\n     * @memberof parse5#ParserStream\r\n     * @instance\r\n     * @type {Function}\r\n     * @param {ASTNode} scriptElement - The script element that caused the event.\r\n     * @param {Function} documentWrite(html) - Write additional `html` at the current parsing position.\r\n     *  Suitable for implementing the DOM `document.write` and `document.writeln` methods.\r\n     * @param {Function} resume - Resumes parsing.\r\n     * @example\r\n     * var parse = require('parse5');\r\n     * var http = require('http');\r\n     *\r\n     * var parser = new parse5.ParserStream();\r\n     *\r\n     * parser.on('script', function(scriptElement, documentWrite, resume) {\r\n     *   var src = parse5.treeAdapters.default.getAttrList(scriptElement)[0].value;\r\n     *\r\n     *   http.get(src, function(res) {\r\n     *      // Fetch the script content, execute it with DOM built around `parser.document` and\r\n     *      // `document.write` implemented using `documentWrite`.\r\n     *      ...\r\n     *      // Then resume parsing.\r\n     *      resume();\r\n     *   });\r\n     * });\r\n     *\r\n     * parser.end('<script src=\"example.com/script.js\"></script>');\r\n     */\n\n    this.emit('script', scriptElement, this._documentWrite, this._resume);\n  } else this._runParsingLoop();\n};","map":null,"metadata":{},"sourceType":"script"}