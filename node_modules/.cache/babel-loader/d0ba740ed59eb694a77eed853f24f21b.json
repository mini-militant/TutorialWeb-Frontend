{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nvar parse5 = require('parse5');\n\nvar flatten = require('lodash.flatten');\n\nvar React = require('react');\n\nvar uuid = require('uuid').v4;\n\nvar isBrowser = !!(document && window);\n\nvar findScripts = function findScripts(node) {\n  if (node.tagName && node.tagName === 'script') {\n    return (node.childNodes || []).map(function (n) {\n      return n.value;\n    });\n  }\n\n  return flatten((node.childNodes || []).map(findScripts));\n};\n\nvar InnerHTML = function (_React$Component) {\n  _inherits(InnerHTML, _React$Component);\n\n  function InnerHTML(props, context) {\n    _classCallCheck(this, InnerHTML);\n\n    var _this = _possibleConstructorReturn(this, (InnerHTML.__proto__ || Object.getPrototypeOf(InnerHTML)).call(this, props, context));\n\n    _this.state = _this.initialState(props);\n    return _this;\n  }\n\n  _createClass(InnerHTML, [{\n    key: 'clean',\n    value: function clean() {\n      if (!this.state.id || !isBrowser) {\n        return;\n      }\n\n      var node = document.getElementById(this.state.id);\n\n      if (!node) {\n        return;\n      }\n\n      while (node.hasChildNodes()) {\n        node.removeChild(node.lastChild);\n      }\n    }\n  }, {\n    key: 'parse',\n    value: function parse(props) {\n      var html = (props || {}).html;\n\n      if (!html || typeof html !== 'string') {\n        return;\n      }\n\n      return findScripts(parse5.parseFragment(html));\n    }\n  }, {\n    key: 'initialState',\n    value: function initialState(props) {\n      return {\n        id: (this.state || {}).id || uuid(),\n        scripts: this.parse(props)\n      };\n    }\n  }, {\n    key: 'shouldComponentUpdate',\n    value: function shouldComponentUpdate(nextProps) {\n      return this.props.html !== nextProps.html;\n    }\n  }, {\n    key: 'componentWillReceiveProps',\n    value: function componentWillReceiveProps(nextProps) {\n      if (this.props.html === nextProps.html) {\n        return;\n      }\n\n      this.clean();\n      this.setState(this.initialState(nextProps));\n    }\n  }, {\n    key: 'componentDidMount',\n    value: function componentDidMount() {\n      this.componentDidUpdate();\n    }\n  }, {\n    key: 'componentDidUpdate',\n    value: function componentDidUpdate() {\n      var scripts = (this.state || {}).scripts || [];\n      var fns = scripts.map(function (src) {\n        return new Function('require', src);\n      }).forEach(function (fn) {\n        return fn();\n      });\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      if (typeof this.props.html !== 'string') {\n        return null;\n      }\n\n      return React.createElement('div', {\n        id: this.state.id,\n        dangerouslySetInnerHTML: {\n          __html: this.props.html\n        }\n      });\n    }\n  }]);\n\n  return InnerHTML;\n}(React.Component);\n\nexports.default = InnerHTML;","map":null,"metadata":{},"sourceType":"script"}