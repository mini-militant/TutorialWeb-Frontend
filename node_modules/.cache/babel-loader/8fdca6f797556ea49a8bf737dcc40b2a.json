{"ast":null,"code":"'use strict';\n\nvar Parser = require('./parser'),\n    Serializer = require('./serializer');\n/** @namespace parse5 */\n\n/**\r\n * Parses an HTML string.\r\n * @function parse\r\n * @memberof parse5\r\n * @instance\r\n * @param {string} html - Input HTML string.\r\n * @param {ParserOptions} [options] - Parsing options.\r\n * @returns {ASTNode<Document>} document\r\n * @example\r\n * var parse5 = require('parse5');\r\n *\r\n * var document = parse5.parse('<!DOCTYPE html><html><head></head><body>Hi there!</body></html>');\r\n */\n\n\nexports.parse = function parse(html, options) {\n  var parser = new Parser(options);\n  return parser.parse(html);\n};\n/**\r\n * Parses an HTML fragment.\r\n * @function parseFragment\r\n * @memberof parse5\r\n * @instance\r\n * @param {ASTNode} [fragmentContext] - Parsing context element. If specified, given fragment\r\n * will be parsed as if it was set to the context element's `innerHTML` property.\r\n * @param {string} html - Input HTML fragment string.\r\n * @param {ParserOptions} [options] - Parsing options.\r\n * @returns {ASTNode<DocumentFragment>} documentFragment\r\n * @example\r\n * var parse5 = require('parse5');\r\n *\r\n * var documentFragment = parse5.parseFragment('<table></table>');\r\n *\r\n * // Parses the html fragment in the context of the parsed <table> element.\r\n * var trFragment = parser.parseFragment(documentFragment.childNodes[0], '<tr><td>Shake it, baby</td></tr>');\r\n */\n\n\nexports.parseFragment = function parseFragment(fragmentContext, html, options) {\n  if (typeof fragmentContext === 'string') {\n    options = html;\n    html = fragmentContext;\n    fragmentContext = null;\n  }\n\n  var parser = new Parser(options);\n  return parser.parseFragment(html, fragmentContext);\n};\n/**\r\n * Serializes an AST node to an HTML string.\r\n * @function serialize\r\n * @memberof parse5\r\n * @instance\r\n * @param {ASTNode} node - Node to serialize.\r\n * @param {SerializerOptions} [options] - Serialization options.\r\n * @returns {String} html\r\n * @example\r\n * var parse5 = require('parse5');\r\n *\r\n * var document = parse5.parse('<!DOCTYPE html><html><head></head><body>Hi there!</body></html>');\r\n *\r\n * // Serializes a document.\r\n * var html = parse5.serialize(document);\r\n *\r\n * // Serializes the <body> element content.\r\n * var bodyInnerHtml = parse5.serialize(document.childNodes[0].childNodes[1]);\r\n */\n\n\nexports.serialize = function (node, options) {\n  var serializer = new Serializer(node, options);\n  return serializer.serialize();\n};\n/**\r\n * Provides built-in tree adapters that can be used for parsing and serialization.\r\n * @var treeAdapters\r\n * @memberof parse5\r\n * @instance\r\n * @property {TreeAdapter} default - Default tree format for parse5.\r\n * @property {TreeAdapter} htmlparser2 - Quite popular [htmlparser2](https://github.com/fb55/htmlparser2) tree format\r\n * (e.g. used by [cheerio](https://github.com/MatthewMueller/cheerio) and [jsdom](https://github.com/tmpvar/jsdom)).\r\n * @example\r\n * var parse5 = require('parse5');\r\n *\r\n * // Uses the default tree adapter for parsing.\r\n * var document = parse5.parse('<div></div>', { treeAdapter: parse5.treeAdapters.default });\r\n *\r\n * // Uses the htmlparser2 tree adapter with the SerializerStream.\r\n * var serializer = new parse5.SerializerStream(node, { treeAdapter: parse5.treeAdapters.htmlparser2 });\r\n */\n\n\nexports.treeAdapters = {\n  default: require('./tree_adapters/default'),\n  htmlparser2: require('./tree_adapters/htmlparser2')\n}; // Streaming\n\nexports.ParserStream = require('./parser/stream');\nexports.SerializerStream = require('./serializer/stream');\nexports.SAXParser = require('./sax');","map":null,"metadata":{},"sourceType":"script"}