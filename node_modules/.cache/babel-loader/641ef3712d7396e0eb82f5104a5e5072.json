{"ast":null,"code":"'use strict';\n\nvar ReadableStream = require('stream').Readable,\n    inherits = require('util').inherits,\n    Serializer = require('./index');\n/**\r\n * Streaming AST node to an HTML serializer.\r\n * A [readable stream]{@link https://nodejs.org/api/stream.html#stream_class_stream_readable}.\r\n * @class SerializerStream\r\n * @memberof parse5\r\n * @instance\r\n * @extends stream.Readable\r\n * @param {ASTNode} node - Node to serialize.\r\n * @param {SerializerOptions} [options] - Serialization options.\r\n * @example\r\n * var parse5 = require('parse5');\r\n * var fs = require('fs');\r\n *\r\n * var file = fs.createWriteStream('/home/index.html');\r\n *\r\n * // Serializes the parsed document to HTML and writes it to the file.\r\n * var document = parse5.parse('<body>Who is John Galt?</body>');\r\n * var serializer = new parse5.SerializerStream(document);\r\n *\r\n * serializer.pipe(file);\r\n */\n\n\nvar SerializerStream = module.exports = function (node, options) {\n  ReadableStream.call(this);\n  this.serializer = new Serializer(node, options);\n  Object.defineProperty(this.serializer, 'html', {\n    //NOTE: To make `+=` concat operator work properly we define\n    //getter which always returns empty string\n    get: function () {\n      return '';\n    },\n    set: this.push.bind(this)\n  });\n};\n\ninherits(SerializerStream, ReadableStream); //Readable stream implementation\n\nSerializerStream.prototype._read = function () {\n  this.serializer.serialize();\n  this.push(null);\n};","map":null,"metadata":{},"sourceType":"script"}